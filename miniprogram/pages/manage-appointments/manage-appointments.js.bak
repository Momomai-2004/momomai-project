const app = getApp();
const db = wx.cloud.database();
const appointmentsCollection = db.collection('appointments');
const MAX_LIMIT = 20; // 单次查询最大数量限制

Page({
  /**
   * 页面的初始数据
   */
  data: {
    isLoggedIn: false,
    staffInfo: null,
    appointments: [],
    filteredAppointments: [],
    isLoading: true,
    activeTab: 'today',
    activeTabText: '今日',
    searchQuery: '',
    selectedFilter: 'all',
    isFilterOpen: false,
    filterOptions: {
      'all': '全部状态',
      'pending': '待确认',
      'confirmed': '已确认',
      'paid': '已支付',
      'completed': '已完成',
      'cancelled': '已取消'
    },
    statusTexts: {
      'pending': '待确认',
      'confirmed': '已确认',
      'paid': '已支付',
      'completed': '已完成',
      'cancelled': '已取消'
    },
    stats: {
      pending: 0,
      confirmed: 0,
      today: 0
    },
    lastRefreshTime: '',
    connectionStatus: 'unknown' // 'connected', 'error'
  },

  /**
   * 生命周期函数--监听页面加载
   */
  onLoad: function (options) {
    this.checkLoginStatus();
    this.setData({
      lastRefreshTime: this.formatTime(new Date())
    });

    // 自动检查系统健康状态
    this.autoDiagnose();
  },

  /**
   * 生命周期函数--监听页面显示
   */
  onShow: function () {
    this.checkLoginStatus();
    if (this.data.isLoggedIn) {
      this.loadAppointments();
    }
  },

  /**
   * 生命周期函数--监听页面隐藏
   */
  onHide: function() {
    // 页面隐藏时清除自动刷新定时器
    this.stopAutoRefresh();
  },

  /**
   * 生命周期函数--监听页面卸载
   */
  onUnload: function() {
    // 页面卸载时清除自动刷新定时器
    this.stopAutoRefresh();
  },

  /**
   * 登录相关
   */
  checkLoginStatus() {
    const staffInfo = wx.getStorageSync('staffInfo');
    if (staffInfo && staffInfo._id) {
      this.setData({
        isLoggedIn: true,
        staffInfo
      });
    } else {
      this.setData({
        isLoggedIn: false,
        staffInfo: null
      });
    }
  },

  /**
   * 前往员工登录页
   */
  goToStaffLogin: function () {
    console.log('跳转到员工登录页');
    
    // 设置一个标志，登录成功后自动返回预约管理页
    wx.setStorageSync('loginReturnPage', '/pages/manage-appointments/manage-appointments');
    
    wx.navigateTo({
      url: '/pages/login/staff/staff',
      success: () => {
        console.log('成功跳转到员工登录页');
      },
      fail: (err) => {
        console.error('跳转到员工登录页失败:', err);
        wx.showToast({
          title: '无法跳转到登录页，请重试',
          icon: 'none',
          duration: 2000
        });
      }
    });
  },

  /**
   * 切换标签
   */
  switchTab: function (e) {
    const tab = e.currentTarget.dataset.tab;
    const tabTexts = {
      'today': '今日',
      'upcoming': '未来',
      'all': '所有'
    };
    
    this.setData({
      activeTab: tab,
      activeTabText: tabTexts[tab],
      selectedFilter: 'all',
      isFilterOpen: false,
      isLoading: true
    });
    
    this.loadAppointments();
  },

  /**
   * 加载预约数据
   */
  async loadAppointments(isPullDown = false) {
    if (!this.data.isLoggedIn) return;
    
    if (!isPullDown) {
      this.setData({ isLoading: true });
    }
    
    try {
      // 获取员工ID
      const staffId = this.data.staffInfo._id;
      if (!staffId) {
        throw new Error('员工ID不存在');
      }
      
      // 云函数查询
      const result = await wx.cloud.callFunction({
        name: 'getStaffAppointments',
        data: {
          staffId,
          tab: this.data.activeTab
        }
      });
      
      if (result && result.result && result.result.data) {
        const appointments = result.result.data;
        
        // 更新统计数据
        const stats = this.calculateStats(appointments);
        
        this.setData({
          appointments,
          filteredAppointments: this.filterAppointments(appointments, this.data.selectedFilter, this.data.searchQuery),
          isLoading: false,
          stats,
          lastRefreshTime: this.formatTime(new Date()),
          connectionStatus: 'connected'
        });
      } else {
        throw new Error('查询返回数据格式错误');
      }
    } catch (error) {
      console.error('加载预约失败:', error);
      
      // 如果云函数调用失败，尝试使用客户端查询
      this.fallbackQueryAppointments();
      
      this.setData({
        isLoading: false,
        connectionStatus: 'error'
      });
    } finally {
      if (isPullDown) {
        wx.stopPullDownRefresh();
      }
    }
  },

  /**
   * 备用方案：客户端查询
   */
  async fallbackQueryAppointments() {
    try {
      const staffId = this.data.staffInfo._id;
      let whereCondition = {
        staffId: staffId
      };
      
      // 根据当前选项卡设置查询条件
      const today = this.formatDate(new Date());
      
      if (this.data.activeTab === 'today') {
        whereCondition.date = today;
      } else if (this.data.activeTab === 'upcoming') {
        const todayDate = new Date();
        const nextWeek = new Date(todayDate.getTime() + 7 * 24 * 60 * 60 * 1000);
        const nextWeekStr = this.formatDate(nextWeek);
        
        whereCondition = db.command.and([
          { staffId: staffId },
          { date: db.command.gt(today) },
          { date: db.command.lte(nextWeekStr) }
        ]);
      }
      
      // 查询预约数据
      const { data } = await appointmentsCollection
        .where(whereCondition)
        .orderBy('date', 'asc')
        .orderBy('startTime', 'asc')
        .limit(MAX_LIMIT)
        .get();
      
      // 更新统计数据
      const stats = this.calculateStats(data);
      
      this.setData({
        appointments: data,
        filteredAppointments: this.filterAppointments(data, this.data.selectedFilter, this.data.searchQuery),
        stats,
        lastRefreshTime: this.formatTime(new Date()) + ' (本地)'
      });
    } catch (error) {
      console.error('备用查询失败:', error);
      wx.showToast({
        title: '加载数据失败',
        icon: 'none'
      });
    }
  },
  
  // 计算统计数据
  calculateStats(appointments) {
    const today = this.formatDate(new Date());
    
    const stats = {
      pending: 0,
      confirmed: 0,
      today: 0
    };
    
    appointments.forEach(item => {
      if (item.status === 'pending') {
        stats.pending++;
      } else if (item.status === 'confirmed' || item.status === 'paid') {
        stats.confirmed++;
      }
      
      if (item.date === today) {
        stats.today++;
      }
    });
    
    return stats;
  },

  /**
   * 搜索输入事件
   */
  onSearchInput: function (e) {
    const searchQuery = e.detail.value;
    this.setData({
      searchQuery,
      filteredAppointments: this.filterAppointments(this.data.appointments, this.data.selectedFilter, searchQuery)
    });
  },

  /**
   * 清除搜索关键词
   */
  clearSearch: function () {
    this.setData({
      searchQuery: '',
      filteredAppointments: this.filterAppointments(this.data.appointments, this.data.selectedFilter, '')
    });
  },

  /**
   * 筛选功能
   */
  toggleFilter: function () {
    this.setData({
      isFilterOpen: !this.data.isFilterOpen
    });
    
    if (this.data.isFilterOpen) {
      // 显示筛选选项面板
      wx.showActionSheet({
        itemList: Object.values(this.data.filterOptions),
        success: (res) => {
          const filterKeys = Object.keys(this.data.filterOptions);
          const selectedFilter = filterKeys[res.tapIndex];
          
          this.setData({
            selectedFilter,
            isFilterOpen: false,
            filteredAppointments: this.filterAppointments(this.data.appointments, selectedFilter, this.data.searchQuery)
          });
        },
        fail: () => {
          this.setData({
            isFilterOpen: false
          });
        }
      });
    }
  },

  /**
   * 筛选预约数据
   */
  filterAppointments: function (appointments, filter, searchQuery) {
    let result = [...appointments];
    
    // 状态筛选
    if (filter !== 'all') {
      result = result.filter(item => item.status === filter);
    }
    
    // 搜索筛选
    if (searchQuery) {
      const query = searchQuery.toLowerCase();
      result = result.filter(item => 
        (item.customerName && item.customerName.toLowerCase().includes(query)) ||
        (item.customerPhone && item.customerPhone.includes(query))
      );
    }
    
    return result;
  },

  /**
   * 格式化日期
   */
  formatDate: function (date) {
    const year = date.getFullYear();
    const month = (date.getMonth() + 1).toString().padStart(2, '0');
    const day = date.getDate().toString().padStart(2, '0');
    return `${year}-${month}-${day}`;
  },

  /**
   * 格式化时间
   */
  formatTime: function (date) {
    const hours = date.getHours().toString().padStart(2, '0');
    const minutes = date.getMinutes().toString().padStart(2, '0');
    return `${hours}:${minutes}`;
  },

  /**
   * 拨打客户电话
   */
  callCustomer: function (e) {
    const phone = e.currentTarget.dataset.phone;
    if (!phone) return;
    
    wx.makePhoneCall({
      phoneNumber: phone,
      fail(err) {
        console.error('拨打电话失败:', err);
      }
    });
  },

  /**
   * 自动诊断函数
   */
  autoDiagnose: function() {
    const that = this;
    console.log('开始自动诊断...');
    
    // 1. 检查网络连接
    wx.getNetworkType({
      success(res) {
        const networkType = res.networkType;
        console.log('网络类型:', networkType);
        
        if (networkType === 'none') {
          that.setData({ connectionStatus: 'error' });
          console.log('⚠️ 网络连接异常');
        } else {
          // 2. 检查数据库连接
          that.checkCloudConnection();
        }
      }
    });
    
    // 3. 分析数据
    const { appointments } = that.data;
    if (appointments && appointments.length > 0) {
      console.log(`已加载 ${appointments.length} 条预约记录`);
      
      // 查找今日即将开始的预约
      const upcomingAppointments = appointments.filter(function(item) {
        return that.isToday(item.date) && 
              that.isWithin30Minutes(item.startTime) &&
              (item.status === 'confirmed' || item.status === 'paid');
      });
      
      if (upcomingAppointments.length > 0) {
        console.log(`有 ${upcomingAppointments.length} 个预约即将开始`);
      }
    }
  },
  
  // 检查云环境连接
  async checkCloudConnection() {
    try {
      const res = await wx.cloud.callFunction({
        name: 'checkConnection',
        data: {}
      });
      
      if (res && res.result && res.result.success) {
        this.setData({ connectionStatus: 'connected' });
        console.log('✅ 云环境连接正常');
      } else {
        this.setData({ connectionStatus: 'error' });
        console.log('⚠️ 云环境连接异常');
      }
    } catch (error) {
      console.error('检查云环境连接失败:', error);
      this.setData({ connectionStatus: 'error' });
    }
  },

  // 检查即将到来的预约
  isToday: function(dateStr) {
    const today = this.formatDate(new Date());
    return dateStr === today;
  },
  
  // 检查即将到来的预约
  isWithin30Minutes: function(timeStr) {
    if (!timeStr) return false;
    
    const now = new Date();
    const currentHours = now.getHours();
    const currentMinutes = now.getMinutes();
    
    const [hours, minutes] = timeStr.split(':').map(Number);
    
    // 计算当前时间与预约时间的分钟差
    const currentTotalMinutes = currentHours * 60 + currentMinutes;
    const appointmentTotalMinutes = hours * 60 + minutes;
    const diffMinutes = appointmentTotalMinutes - currentTotalMinutes;
    
    // 如果预约时间在当前时间的30分钟内，且尚未过期
    return diffMinutes >= 0 && diffMinutes <= 30;
  },

  // 确认预约
  async confirmAppointment: function (e) {
    const id = e.currentTarget.dataset.id;
    wx.showLoading({ title: '正在确认...' });
    
    try {
      await wx.cloud.callFunction({
        name: 'updateAppointmentStatus',
        data: {
          id,
          status: 'confirmed',
          staffId: this.data.staffInfo._id,
          staffName: this.data.staffInfo.name
        }
      });
      
      // 更新本地数据
      this.updateLocalAppointment(id, { status: 'confirmed' });
      
      wx.showToast({
        title: '预约已确认',
        icon: 'success'
      });
    } catch (error) {
      console.error('确认预约失败:', error);
      wx.showToast({
        title: '确认失败，请重试',
        icon: 'none'
      });
    } finally {
      wx.hideLoading();
    }
  },
  
  // 一键确认所有待处理预约
  async confirmAllPending: function () {
    const pendingAppointments = this.data.appointments.filter(a => a.status === 'pending');
    
    if (pendingAppointments.length === 0) {
      wx.showToast({
        title: '暂无待确认预约',
        icon: 'none'
      });
      return;
    }
    
    wx.showModal({
      title: '批量确认',
      content: `确定要一键确认${pendingAppointments.length}个待处理预约吗？`,
      success: async (res) => {
        if (res.confirm) {
          wx.showLoading({ title: '批量确认中...' });
          
          try {
            await wx.cloud.callFunction({
              name: 'batchUpdateAppointments',
              data: {
                appointmentIds: pendingAppointments.map(a => a._id),
                status: 'confirmed',
                staffId: this.data.staffInfo._id,
                staffName: this.data.staffInfo.name
              }
            });
            
            // 更新本地数据
            const updatedAppointments = this.data.appointments.map(item => {
              if (item.status === 'pending') {
                return { ...item, status: 'confirmed' };
              }
              return item;
            });
            
            const stats = this.calculateStats(updatedAppointments);
            
            this.setData({
              appointments: updatedAppointments,
              filteredAppointments: this.filterAppointments(updatedAppointments, this.data.selectedFilter, this.data.searchQuery),
              stats
            });
            
            wx.showToast({
              title: '批量确认成功',
              icon: 'success'
            });
          } catch (error) {
            console.error('批量确认失败:', error);
            wx.showToast({
              title: '批量确认失败',
              icon: 'none'
            });
          } finally {
            wx.hideLoading();
          }
        }
      }
    });
  },
  
  // 取消预约
  cancelAppointment: function (e) {
    const id = e.currentTarget.dataset.id;
    
    wx.showModal({
      title: '取消预约',
      content: '确定要取消这个预约吗？',
      success: async (res) => {
        if (res.confirm) {
          wx.showLoading({ title: '取消中...' });
          
          try {
            await wx.cloud.callFunction({
              name: 'updateAppointmentStatus',
              data: {
                id,
                status: 'cancelled',
                staffId: this.data.staffInfo._id,
                staffName: this.data.staffInfo.name
              }
            });
            
            // 更新本地数据
            this.updateLocalAppointment(id, { status: 'cancelled' });
            
            wx.showToast({
              title: '预约已取消',
              icon: 'success'
            });
          } catch (error) {
            console.error('取消预约失败:', error);
            wx.showToast({
              title: '取消失败，请重试',
              icon: 'none'
            });
          } finally {
            wx.hideLoading();
          }
        }
      }
    });
  },
  
  // 完成服务
  completeService: function (e) {
    const id = e.currentTarget.dataset.id;
    
    wx.showModal({
      title: '完成服务',
      content: '确认已完成此预约的服务？',
      success: async (res) => {
        if (res.confirm) {
          wx.showLoading({ title: '处理中...' });
          
          try {
            await wx.cloud.callFunction({
              name: 'updateAppointmentStatus',
              data: {
                id,
                status: 'completed',
                staffId: this.data.staffInfo._id,
                staffName: this.data.staffInfo.name
              }
            });
            
            // 更新本地数据
            this.updateLocalAppointment(id, { status: 'completed' });
            
            wx.showToast({
              title: '服务已完成',
              icon: 'success'
            });
          } catch (error) {
            console.error('完成服务失败:', error);
            wx.showToast({
              title: '操作失败，请重试',
              icon: 'none'
            });
          } finally {
            wx.hideLoading();
          }
        }
      }
    });
  },
  
  // 修改预约
  changeAppointment: function (e) {
    const appointment = e.currentTarget.dataset.appointment;
    
    wx.navigateTo({
      url: `/pages/edit-appointment/edit-appointment?id=${appointment._id}`
    });
  },
  
  // 查看预约详情
  viewAppointmentDetail: function (e) {
    const appointment = e.currentTarget.dataset.appointment;
    
    // 格式化预约详情
    const detail = {
      serviceName: appointment.serviceName,
      date: appointment.date,
      time: `${appointment.startTime} - ${appointment.endTime}`,
      status: this.data.statusTexts[appointment.status],
      price: appointment.price,
      customerName: appointment.customerName,
      customerPhone: appointment.customerPhone,
      therapistName: appointment.therapistName || '未分配',
      therapistTitle: appointment.therapistTitle || '',
      notes: appointment.notes || '无',
      createdAt: appointment.createdAt || '未知',
      updatedAt: appointment.updatedAt || '未知'
    };
    
    // 构建详情显示内容
    let content = `服务: ${detail.serviceName}\n`;
    content += `日期: ${detail.date}\n`;
    content += `时间: ${detail.time}\n`;
    content += `状态: ${detail.status}\n`;
    content += `价格: ¥${detail.price}\n`;
    content += `客户: ${detail.customerName}\n`;
    content += `电话: ${detail.customerPhone}\n`;
    content += `治疗师: ${detail.therapistName}\n`;
    
    if (detail.therapistTitle) {
      content += `职称: ${detail.therapistTitle}\n`;
    }
    
    if (detail.notes !== '无') {
      content += `备注: ${detail.notes}\n`;
    }
    
    // 显示详情弹窗
    wx.showModal({
      title: '预约详情',
      content: content,
      showCancel: false,
      confirmText: '关闭'
    });
  },
  
  // 更新本地预约数据
  updateLocalAppointment: function (id, newData) {
    const { appointments } = this.data;
    const index = appointments.findIndex(item => item._id === id);
    
    if (index !== -1) {
      const updatedAppointments = [...appointments];
      updatedAppointments[index] = { 
        ...updatedAppointments[index], 
        ...newData 
      };
      
      const stats = this.calculateStats(updatedAppointments);
      
      this.setData({
        appointments: updatedAppointments,
        filteredAppointments: this.filterAppointments(updatedAppointments, this.data.selectedFilter, this.data.searchQuery),
        stats
      });
    }
  },

  // 开始自动刷新
  startAutoRefresh: function() {
    // 先清除可能存在的定时器
    this.stopAutoRefresh();
    
    // 设置新的定时器，每2分钟刷新一次
    this.data.refreshInterval = setInterval(() => {
      console.log('自动刷新数据...');
      this.refreshAppointments(true); // 传入true表示静默刷新
    }, 2 * 60 * 1000); // 2分钟
  },
  
  // 停止自动刷新
  stopAutoRefresh: function() {
    if (this.data.refreshInterval) {
      clearInterval(this.data.refreshInterval);
      this.data.refreshInterval = null;
    }
  },

  // 刷新预约列表
  refreshAppointments: function (silent = false) {
    this.setData({
      selectedFilter: 'all',
      searchQuery: '',
      filteredAppointments: []
    });
    this.loadAppointments();
    
    if (!silent) {
      this.startAutoRefresh();
    }
  },

  // 添加新预约
  navigateToAddAppointment: function () {
    wx.navigateTo({
      url: '/pages/add-appointment/add-appointment'
    });
  },

  // 调试功能
  debugFunction: function () {
    wx.showActionSheet({
      itemList: ['打印当前预约数据', '打印员工登录状态', '检测云环境连接', '检查数据库预约'],
      success: res => {
        switch (res.tapIndex) {
          case 0:
            console.log('当前预约数据:', this.data.appointments);
            wx.showModal({
              title: '数据查看',
              content: `当前界面有 ${this.data.appointments.length} 条预约数据`,
              showCancel: false
            });
            break;
          case 1:
            const staffInfo = wx.getStorageSync('staffInfo') || {};
            const isStaffLoggedIn = wx.getStorageSync('isStaffLoggedIn') || false;
            console.log('员工登录状态:', isStaffLoggedIn);
            console.log('员工信息:', staffInfo);
            wx.showModal({
              title: '员工状态',
              content: `登录状态: ${isStaffLoggedIn ? '已登录' : '未登录'}\n员工ID: ${staffInfo._id || '无'}\n员工姓名: ${staffInfo.name || '无'}`,
              showCancel: false,
              success: () => {
                wx.setClipboardData({
                  data: JSON.stringify(staffInfo, null, 2),
                  success: () => {
                    wx.showToast({
                      title: '员工信息已复制',
                      icon: 'success'
                    });
                  }
                });
              }
            });
            break;
          case 2:
            wx.showLoading({
              title: '检查连接中...',
            });
            wx.cloud.callFunction({
              name: 'checkConnection',
              success: res => {
                wx.hideLoading();
                wx.showModal({
                  title: '连接状态',
                  content: `云环境连接正常，响应时间: ${res.result.responseTime}ms`,
                  showCancel: false
                });
              },
              fail: err => {
                wx.hideLoading();
                wx.showModal({
                  title: '连接状态',
                  content: '云环境连接失败，请检查网络',
                  showCancel: false
                });
                console.error('检查连接失败:', err);
              }
            });
            break;
          case 3:
            wx.showLoading({
              title: '检查数据库中...',
            });
            const staffId = wx.getStorageSync('staffInfo')?._id || '';
            
            if (!staffId) {
              wx.hideLoading();
              wx.showToast({
                title: '未找到员工ID',
                icon: 'none'
              });
              return;
            }
            
            console.log('使用员工ID检查数据库:', staffId);
            
            // 先直接查询数据库所有预约
            const db = wx.cloud.database();
            db.collection('appointments').count().then(res => {
              console.log('数据库中所有预约数量:', res.total);
              
              // 查询当前员工的预约
              return db.collection('appointments').where({
                therapist_id: staffId
              }).count();
            }).then(res => {
              console.log(`员工ID ${staffId} 的预约数量:`, res.total);
              
              // 查询示例预约
              if (res.total > 0) {
                return db.collection('appointments').where({
                  therapist_id: staffId
                }).limit(1).get();
              } else {
                return Promise.resolve({data: []});
              }
            }).then(res => {
              wx.hideLoading();
              
              if (res.data && res.data.length > 0) {
                console.log('预约示例:', res.data[0]);
                wx.showModal({
                  title: '数据库检查',
                  content: `找到员工预约记录，第一条预约ID: ${res.data[0]._id}`,
                  showCancel: false
                });
              } else {
                console.log('未找到员工预约记录');
                wx.showModal({
                  title: '数据库检查',
                  content: `未找到员工 ${staffId} 的预约记录，请检查员工ID是否正确`,
                  showCancel: false
                });
              }
            }).catch(err => {
              wx.hideLoading();
              console.error('查询数据库失败:', err);
              wx.showModal({
                title: '数据库检查',
                content: `查询失败: ${err.message || '未知错误'}`,
                showCancel: false
              });
            });
            break;
        }
      }
    });
  },

  // 开启静默调试模式
  enableSilentDebugMode: function() {
    // 仅在控制台显示，不影响用户体验
    this.setData({ debugMode: true });
    console.log('静默调试模式已开启，将自动执行诊断和错误检测功能');
  }
}); 